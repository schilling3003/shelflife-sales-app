/**
 * @fileoverview Firestore Security Rules for the ShelfLife Sales application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and sales commitments,
 * while allowing public read access to product information. This ensures that users can only
 * access their own data and view publicly available product details.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /products/{productId}: Stores product information.
 * - /users/{userId}/salesCommitments/{salesCommitmentId}: Stores sales commitments made by a user.
 *
 * Key Security Decisions:
 * - User profiles are only accessible by the user themselves.
 * - Product information is publicly readable.
 * - Sales commitments are only accessible by the user who created them.
 * - Listing the /users collection is forbidden.
 *
 * Denormalization for Authorization:
 *  - The data model is structured to avoid any `get()` calls in the security rules.
 *    Authorization is determined solely by the path and the `request.auth.uid`.
 *
 * Structural Segregation:
 *  - Public (products) and private (user profiles, sales commitments) data are stored
 *    in separate collections to simplify access control and improve performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles based on ownership.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user ID matches the authenticated user's ID.
     * @deny (get, create, update, delete, list) if the user ID does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to product information.
     * @path /products/{productId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Allows public read access while restricting write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to sales commitments based on path-based ownership.
     * @path /users/{userId}/salesCommitments/{salesCommitmentId}
     * @allow (get, create, update, delete, list) if the user ID matches the authenticated user's ID.
     * @deny (get, create, update, delete, list) if the user ID does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations on sales commitments.
     */
    match /users/{userId}/salesCommitments/{salesCommitmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}