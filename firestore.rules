/**
 * @fileoverview Firestore Security Rules for the ShelfLife Sales application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and sales commitments.
 * Products are globally readable but write-protected.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /products/{productId}: Stores product information, publicly readable but not writable by clients.
 * - /users/{userId}/salesCommitments/{salesCommitmentId}: Stores sales commitments, accessible only by the owning user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Products are publicly readable to simplify the application's data consumption.
 * - All write operations require authentication and ownership validation.
 *
 * Denormalization for Authorization:
 * - The data model uses path-based ownership (e.g., /users/{userId}/...) to avoid the need for `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines whether a user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to check against the request's authentication UID.
     * @return {bool} True if the user ID matches the request's authentication UID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against the resource.
     * @return {bool} True if the user ID matches the resource and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'test_user' with id: 'test_user' can create their profile.
     * @deny (create) User 'another_user' attempts to create a profile with id: 'test_user'.
     * @allow (get) User 'test_user' can read their profile.
     * @deny (get) User 'another_user' attempts to read the profile of user 'test_user'.
     * @allow (update) User 'test_user' can update their profile.
     * @deny (update) User 'another_user' attempts to update the profile of user 'test_user'.
     * @allow (delete) User 'test_user' can delete their profile.
     * @deny (delete) User 'another_user' attempts to delete the profile of user 'test_user'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for product information.
     * @path /products/{productId}
     * @allow (get) Any user can read any product.
     * @allow (list) Any user can list products.
     * @deny (create) No client-side creation of products allowed.
     * @deny (update) No client-side updates of products allowed.
     * @deny (delete) No client-side deletion of products allowed.
     * @principle Allows public read access to product information while preventing client-side modifications.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for sales commitments.
     * @path /users/{userId}/salesCommitments/{salesCommitmentId}
     * @allow (create) User 'test_user' can create a sales commitment under their user ID.
     * @deny (create) User 'another_user' attempts to create a sales commitment under user 'test_user'.
     * @allow (get) User 'test_user' can read their own sales commitment.
     * @deny (get) User 'another_user' attempts to read a sales commitment under user 'test_user'.
     * @allow (update) User 'test_user' can update their own sales commitment.
     * @deny (update) User 'another_user' attempts to update a sales commitment under user 'test_user'.
     * @allow (delete) User 'test_user' can delete their own sales commitment.
     * @deny (delete) User 'another_user' attempts to delete a sales commitment under user 'test_user'.
     * @principle Enforces document ownership for sales commitments.
     */
    match /users/{userId}/salesCommitments/{salesCommitmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}