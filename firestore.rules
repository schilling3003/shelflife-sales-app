/**
 * @fileoverview Firestore Security Rules for ShelfLife Sales application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and sales commitments,
 * combined with public read access for product information. Authorization Independence is achieved
 * through path-based ownership and avoiding `get()` calls in rules.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /products/{productId}: Stores product data, publicly readable.
 * - /users/{userId}/salesCommitments/{salesCommitmentId}: Stores sales commitments, accessible only by the owning user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted for the /products collection.
 * - All write operations require user authentication.
 *
 * Denormalization for Authorization:
 * - The `salesCommitments` subcollection is nested under `/users/{userId}` to avoid needing to store user IDs inside the sales commitment documents and to ensure that a user can only manage their own commitments.
 *
 * Structural Segregation:
 * - Public `products` are stored in a top-level collection, while private `salesCommitments` are stored in user subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get, update, delete, list) - User with UID 'user_abc' can read, update, and delete their profile at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get, update, delete, list) - User with UID 'user_xyz' cannot read, update, or delete the profile at /users/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in and owns the existing resource.
      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; //Enforce immutable userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to product information.
     * @path /products/{productId}
     * @allow (get, list) - Any user (authenticated or not) can read product data.
     * @deny (create, update, delete) - No one can create, update, or delete product data through client-side rules.
     * @principle Provides public read access with restricted writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces user-ownership for sales commitments within a user's profile.
     * @path /users/{userId}/salesCommitments/{salesCommitmentId}
     * @allow (create) - User with UID 'user_abc' can create a sales commitment under /users/user_abc/salesCommitments.
     * @allow (get, update, delete, list) - User with UID 'user_abc' can read, update, and delete their sales commitments under /users/user_abc/salesCommitments.
     * @deny (create) - User with UID 'user_xyz' cannot create a sales commitment under /users/user_abc/salesCommitments.
     * @deny (get, update, delete, list) - User with UID 'user_xyz' cannot read, update, or delete sales commitments under /users/user_abc/salesCommitments.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/salesCommitments/{salesCommitmentId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in and owns the existing resource.
      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; //Enforce immutable userId
      allow delete: if isExistingOwner(userId);
    }
  }
}