/**
 * @fileoverview Firestore Security Rules for ShelfLife Sales application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and sales commitments,
 * while allowing public read access to product information.  Authorization Independence
 * is strictly enforced, eliminating the need for `get()` calls in rules.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; accessible only by the user.
 * - /products/{productId}: Stores product information; globally readable.
 * - /users/{userId}/salesCommitments/{salesCommitmentId}: Stores sales commitments; accessible only by the user.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Products are publicly readable but not writable through the client.
 * - Sales commitments are owned by the user and stored under their profile.
 * - No user listing is allowed to protect privacy.
 *
 * Denormalization for Authorization:
 * - SalesCommitments are stored as subcollections of users to avoid needing to query across collections to validate ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *        Request: auth.uid = 'user123', resource.data.id = 'user123'
     * @allow (get) User with ID 'user123' can read their own profile.
     *        Request: auth.uid = 'user123'
     * @allow (update) User with ID 'user123' can update their own profile.
     *        Request: auth.uid = 'user123'
     * @allow (delete) User with ID 'user123' can delete their own profile.
     *        Request: auth.uid = 'user123'
     * @deny (create) User with ID 'user123' cannot create a profile with a different ID.
     *       Request: auth.uid = 'user123', resource.data.id = 'user456'
     * @deny (get) User with ID 'user456' cannot read user 'user123' profile.
     *       Request: auth.uid = 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to product information.
     * @path /products/{productId}
     * @allow (get) Any user can read any product.
     *        Request: auth.uid = null
     * @allow (list) Any user can list products.
     *        Request: auth.uid = null
     * @deny (create) No user can create a product document via client.
     * @deny (update) No user can update a product document via client.
     * @deny (delete) No user can delete a product document via client.
     * @principle Allows public read access with no write access via client.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces access control for sales commitments.
     * @path /users/{userId}/salesCommitments/{salesCommitmentId}
     * @allow (create) User with ID 'user123' can create a sales commitment under their profile.
     *        Request: auth.uid = 'user123'
     * @allow (get) User with ID 'user123' can read their own sales commitment.
     *        Request: auth.uid = 'user123'
     * @allow (list) User with ID 'user123' can list sales commitments under their profile.
     *        Request: auth.uid = 'user123'
     * @allow (update) User with ID 'user123' can update their own sales commitment.
     *        Request: auth.uid = 'user123'
     * @allow (delete) User with ID 'user123' can delete their own sales commitment.
     *        Request: auth.uid = 'user123'
     * @deny (create) User with ID 'user456' cannot create a sales commitment under user 'user123'.
     *       Request: auth.uid = 'user456'
     * @deny (get) User with ID 'user456' cannot read user 'user123' sales commitment.
     *       Request: auth.uid = 'user456'
     * @principle Enforces path-based ownership for sales commitments.
     */
    match /users/{userId}/salesCommitments/{salesCommitmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}