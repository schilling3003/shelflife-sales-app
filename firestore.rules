rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects against unauthenticated requests.
     * @path n/a
     * @allow n/a
     * @deny All requests when the user is not signed in.
     * @principle Requires authentication for all operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @path n/a
     * @allow n/a
     * @deny All requests not made by the owner of the resource.
     * @principle Enforces ownership for data access.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner of the resource.
     * @path n/a
     * @allow n/a
     * @deny All requests not made by the owner of the resource, or for a non-existent resource.
     * @principle Enforces ownership and resource existence for updates and deletes.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource.data);
    }

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) User '6ovLc1kjujV1gCZhrJ84IveEoCi1' can create their own profile.
     * @allow (get) User '6ovLc1kjujV1gCZhrJ84IveEoCi1' can read their own profile.
     * @allow (update) User '6ovLc1kjujV1gCZhrJ84IveEoCi1' can update their own profile.
     * @allow (delete) User '6ovLc1kjujV1gCZhrJ84IveEoCi1' can delete their own profile.
     * @deny (create) User 'otherUser' cannot create a profile for '6ovLc1kjujV1gCZhrJ84IveEoCi1'.
     * @deny (get) User 'otherUser' cannot read the profile of '6ovLc1kjujV1gCZhrJ84IveEoCi1'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId); // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to product information.
     * @path /products/{productId}
     * @allow (get) Any user can read product information.
     * @allow (list) Any user can list product information.
     * @deny (create) No user can create product documents (backend only).
     * @deny (update) No user can update product documents (backend only).
     * @principle Allows public read access to product information, restricts writes.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces access control for sales commitments.
     * @path /users/{userId}/salesCommitments/{salesCommitmentId}
     * @allow (create) User '6ovLc1kjujV1gCZhrJ84IveEoCi1' can create a sales commitment under their own user ID.
     * @allow (get) User '6ovLc1kjujV1gCZhrJ84IveEoCi1' can read a sales commitment under their own user ID.
     * @allow (list) User '6ovLc1kjujV1gCZhrJ84IveEoCi1' can list sales commitments under their own user ID.
     * @allow (update) User '6ovLc1kjujV1gCZhrJ84IveEoCi1' can update a sales commitment under their own user ID.
     * @allow (delete) User '6ovLc1kjujV1gCZhrJ84IveEoCi1' can delete a sales commitment under their own user ID.
     * @deny (create) User 'otherUser' cannot create a sales commitment under user '6ovLc1kjujV1gCZhrJ84IveEoCi1'.
     * @deny (get) User 'otherUser' cannot read a sales commitment under user '6ovLc1kjujV1gCZhrJ84IveEoCi1'.
     * @principle Enforces document ownership for all operations within a user's sales commitments.
     */
    match /users/{userId}/salesCommitments/{salesCommitmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId); // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }
  }
}