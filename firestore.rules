/**
 * @fileoverview Firestore Security Rules for ShelfLife Sales application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and sales commitments,
 * while allowing public read access to product information.  Authorization decisions are
 * based solely on the request path and the authenticated user's ID, avoiding complex
 * lookups.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /products/{productId}: Stores product details.
 * - /users/{userId}/salesCommitments/{salesCommitmentId}: Stores sales commitments made by a user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - All users can read product information.
 * - Users can only read and write their own sales commitments.
 * - Listing of user documents is denied.
 *
 * Denormalization for Authorization:
 * - The 'SalesCommitment' documents are stored as subcollections of the user's document,
 *   so that access control can be easily enforced using path-based rules.
 *   The 'userId' is also stored within the 'SalesCommitment' document to enable validation.
 *
 * Structural Segregation:
 * - Public product data is stored in a top-level collection (/products), separate from
 *   private user data (/users/{userId}/...). This allows for efficient and secure listing
 *   of product data without exposing any private user information.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to product documents. Products are publicly readable.
     * @path /products/{productId}
     * @allow (get) Any user can read any product.
     * @allow (list) Any user can list products.
     * @deny (create) No user can create products through the client.
     * @deny (update) No user can update products through the client.
     * @deny (delete) No user can delete products through the client.
     * @principle Allows public read access, but restricts all write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to sales commitment documents under a specific user.
     * @path /users/{userId}/salesCommitments/{salesCommitmentId}
     * @allow (create) User with ID 'user123' can create a sales commitment under their ID.
     * @allow (get) User with ID 'user123' can read a sales commitment under their ID.
     * @allow (update) User with ID 'user123' can update a sales commitment under their ID.
     * @allow (delete) User with ID 'user123' can delete a sales commitment under their ID.
     * @deny (create) User with ID 'user456' cannot create a sales commitment under 'user123'.
     * @deny (get) User with ID 'user456' cannot read a sales commitment under 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/salesCommitments/{salesCommitmentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}