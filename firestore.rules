/**
 * @fileoverview Firestore Security Rules for the ShelfLife Sales application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and sales commitments.
 * Product information is publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only by the user.
 * - /products/{productId}: Product data, publicly readable.
 * - /users/{userId}/salesCommitments/{salesCommitmentId}: Sales commitments made by a user, accessible only by that user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profiles and sales commitments.
 * - Products are globally readable but not writable by users (consider adding admin role for writes).
 * - Listing all users or products is not explicitly denied in the generated rules, be careful about this in the production app.
 *
 * Denormalization for Authorization:
 * The data structure itself enforces authorization. SalesCommitments are nested under the user's document, making ownership checks trivial. No `get()` calls are required.
 *
 * Structural Segregation:
 * Public product information is stored in a top-level collection, separate from private user data. This avoids the need for complex filtering based on visibility flags.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their profile if authenticated as 'user123'.
     * @deny (create, get, update, delete) User with ID 'user456' cannot access user profile 'user123' if authenticated as 'user123'.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read product information.  Writes are not permitted by default.
     * @path /products/{productId}
     * @allow (get, list) Any user can read and list products.
     * @deny (create, update, delete) Any user cannot create, update, or delete product.
     * @principle Allows public read access while restricting write access.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows users to read and write their own sales commitments.
     * @path /users/{userId}/salesCommitments/{salesCommitmentId}
     * @allow (create) User with ID 'user123' can create a sales commitment under their profile if authenticated as 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete sales commitments under their profile if authenticated as 'user123'.
     * @deny (create, get, update, delete) User with ID 'user456' cannot access sales commitments under user profile 'user123' if authenticated as 'user123'.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/salesCommitments/{salesCommitmentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}