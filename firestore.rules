/**
 * @fileoverview Firestore Security Rules for ShelfLife Sales application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict, path-based authorization with public read access for the 'products' collection.
 * User data is secured under their respective `/users/{userId}` path, and all sales commitments are nested under the user for ownership.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /products/{productId}: Product information, publicly readable.
 * - /users/{userId}/salesCommitments/{salesCommitmentId}: Sales commitments made by a specific user, accessible only by that user.
 *
 * Key Security Decisions:
 * - Products are publicly readable but cannot be created, updated, or deleted through the client. Seed this collection with a script.
 * - User listing is disallowed.
 * - Sales commitments are strictly user-owned and nested under the user's document.
 *
 * Denormalization for Authorization:
 * - The `userId` is denormalized onto the `SalesCommitment` documents, enabling path-based authorization.
 *
 * Structural Segregation:
 * - Public product data is separated from private user data to allow public read access without compromising user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile.
     * @path /users/{userId}
     * @allow (create) request.auth.uid == 'user123' && request.resource.data.id == 'user123'
     * @allow (get, update, delete) request.auth.uid == 'user123' if the document exists
     * @allow (list) false
     * @deny (create) request.auth.uid != 'user123'
     * @deny (get, update, delete) request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read product information, but restricts creation, updates, and deletes.
     * @path /products/{productId}
     * @allow (get, list) true
     * @deny (create, update, delete) true
     * @principle Provides public read access to product data while preventing unauthorized modifications.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows users to read and write their own sales commitments.
     * @path /users/{userId}/salesCommitments/{salesCommitmentId}
     * @allow (create) request.auth.uid == 'user123' && request.resource.data.userId == 'user123'
     * @allow (get, update, delete) request.auth.uid == 'user123' if the document exists
     * @allow (list) request.auth.uid == 'user123'
     * @deny (create) request.auth.uid != 'user123'
     * @deny (get, update, delete) request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/salesCommitments/{salesCommitmentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}