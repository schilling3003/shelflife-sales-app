/**
 * @fileoverview Firestore Security Rules for ShelfLife Sales application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and sales commitments.
 * Product information is globally readable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write their own profile.
 * - /products/{productId}: Stores product information. This collection is publicly readable.
 * - /users/{userId}/salesCommitments/{salesCommitmentId}: Stores sales commitments made by a specific user.
 *   Only the owning user can read/write these commitments.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Product data is globally readable to allow easy access to product information.
 * - All write operations are protected by authorization checks based on user identity and document ownership.
 *
 * Denormalization for Authorization:
 * - The data structure itself (nesting sales commitments under /users/{userId}) serves as denormalization,
 *   allowing simple path-based rules without needing to read other documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users to protect privacy.
     * @path /users
     * @allow None - Listing all users is not permitted.
     * @deny list - Always denies listing all users.
     * @principle Prevents unauthorized listing of user data.
     */
    match /users {
      allow list: if false;
    }

    /**
     * @description Manages user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - Authenticated user with matching {userId}.
     *  (create) - Authenticated user creates their own profile where request.resource.data.id == request.auth.uid.
     *  (update) - Authenticated user updates their own profile where resource.data.id == request.auth.uid.
     *  (delete) - Authenticated user deletes their own profile where resource.data.id == request.auth.uid.
     * @deny (get, create, update, delete) - Any other user attempting to access this profile.
     *  (create) - Any user creates a profile where request.resource.data.id != request.auth.uid.
     *  (update) - Any user updates a profile where resource.data.id != request.auth.uid.
     *  (delete) - Any user deletes a profile where resource.data.id != request.auth.uid.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Manages product information. This collection is globally readable.
     * @path /products/{productId}
     * @allow get, list - Any user can read product information.
     * @deny create, update, delete - Only the application can modify products.
     * @principle Allows public read access while restricting write access to authorized users only (not implemented here).
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages sales commitments for a specific user. Only the user can read/write their own commitments.
     * @path /users/{userId}/salesCommitments/{salesCommitmentId}
     * @allow (get, create, update, delete, list) - Authenticated user with matching {userId}.
     *  (create) - Authenticated user creates a commitment under their own user ID.
     *  (update) - Authenticated user updates a commitment under their own user ID.
     *  (delete) - Authenticated user deletes a commitment under their own user ID.
     *  (list) - Authenticated user lists commitments under their own user ID.
     * @deny (get, create, update, delete, list) - Any other user attempting to access these commitments.
     *  (create) - Any user creates a commitment under a different user ID.
     *  (update) - Any user updates a commitment under a different user ID.
     *  (delete) - Any user deletes a commitment under a different user ID.
     *  (list) - Any user lists commitments under a different user ID.
     * @principle Enforces path-based ownership, restricting access to a user's own data.
     */
    match /users/{userId}/salesCommitments/{salesCommitmentId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the existing owner of the resource.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}