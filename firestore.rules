/**
 * @file Firestore Security Rules for ShelfLife Sales App
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and sales commitments,
 *                  while allowing public read access to product information.  Authorization is determined solely
 *                  by the path and the `request.auth.uid`, ensuring Authorization Independence.
 *
 * @data_structure The data is organized hierarchically:
 *                  - `/users/{userId}`: User profile data, accessible only by the user.
 *                  - `/products/{productId}`: Product information, publicly readable.
 *                  - `/users/{userId}/salesCommitments/{salesCommitmentId}`: Sales commitments made by a specific user,
 *                    accessible only by that user.
 *
 * @key_security_decisions - User listing is allowed for authenticated users.
 *                           - Products are publicly readable.
 *                           - Sales commitments are owned by the user and only accessible by that user.
 *
 * @denormalization_for_authorization N/A - Path-based ownership eliminates the need for data denormalization.
 * @structural_segregation N/A - Data is segregated into collections based on access requirements (public vs. private).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     * @allow (get) User with ID 'user123' reads their own profile.
     * @allow (update) User with ID 'user123' updates their own profile.
     * @allow (delete) User with ID 'user123' deletes their own profile.
     * @deny (create) User with ID 'user456' attempts to create a profile with ID 'user123'.
     * @deny (get) User with ID 'user456' attempts to read the profile of 'user123'.
     * @principle Enforces document ownership for writes, restricts read access to owner.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isSignedIn(); // Allow any authenticated user to list all users
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Grants public read access to product information.
     * @path /products/{productId}
     * @allow (get) Any user can read product 'product123'.
     * @allow (list) Any user can list all products.
     * @deny (create) Any user attempts to create a new product.
     * @deny (update) Any user attempts to update product 'product123'.
     * @deny (delete) Any user attempts to delete product 'product123'.
     * @principle Allows public read access, restricts all write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to sales commitments made by a specific user.
     * @path /users/{userId}/salesCommitments/{salesCommitmentId}
     * @allow (create) User with ID 'user123' creates a sales commitment under their profile.
     * @allow (get) User with ID 'user123' reads their own sales commitment 'commitment456'.
     * @allow (update) User with ID 'user123' updates their own sales commitment 'commitment456'.
     * @allow (delete) User with ID 'user123' deletes their own sales commitment 'commitment456'.
     * @deny (create) User with ID 'user456' attempts to create a sales commitment under the profile of 'user123'.
     * @deny (get) User with ID 'user456' attempts to read the sales commitment 'commitment456' of 'user123'.
     * @principle Enforces document ownership, restricts access to a user's own data tree.
     */
    match /users/{userId}/salesCommitments/{salesCommitmentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}