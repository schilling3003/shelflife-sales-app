rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the isSignedIn function
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the isOwner function
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines the isExistingOwner function.
     *              Combines the ownership check with existence check.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }
    
    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     *        request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' reads their own profile.
     *        request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' updates their own profile.
     *        request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' deletes their own profile.
     *        request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' tries to create a profile for 'user123'.
     *       request.auth.uid == 'user456'
     * @deny (get) User with ID 'user456' tries to read the profile of 'user123'.
     *       request.auth.uid == 'user456'
     * @deny (update) User with ID 'user456' tries to update the profile of 'user123'.
     *       request.auth.uid == 'user456'
     * @deny (delete) User with ID 'user456' tries to delete the profile of 'user123'.
     *       request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /products/{productId} collection.
     * @path /products/{productId}
     * @allow (get) Any user can read product 'product123'.
     *        request.auth.uid != null
     * @allow (list) Any user can list products.
     *        request.auth.uid != null
     * @deny (create) Any user tries to create a new product.
     *       request.auth.uid != null
     * @deny (update) Any user tries to update product 'product123'.
     *        request.auth.uid != null
     * @deny (delete) Any user tries to delete product 'product123'.
     *       request.auth.uid != null
     * @principle Allows public read access but restricts write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /users/{userId}/salesCommitments/{salesCommitmentId} collection.
     * @path /users/{userId}/salesCommitments/{salesCommitmentId}
     * @allow (create) User with ID 'user123' creates a sales commitment.
     *        request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' reads their sales commitment.
     *        request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' updates their sales commitment.
     *        request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' deletes their sales commitment.
     *        request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' tries to create a sales commitment for 'user123'.
     *       request.auth.uid == 'user456'
     * @deny (get) User with ID 'user456' tries to read the sales commitment of 'user123'.
     *       request.auth.uid == 'user456'
     * @deny (update) User with ID 'user456' tries to update the sales commitment of 'user123'.
     *       request.auth.uid == 'user456'
     * @deny (delete) User with ID 'user456' tries to delete the sales commitment of 'user123'.
     *       request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/salesCommitments/{salesCommitmentId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}