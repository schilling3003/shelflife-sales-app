/**
 * @file Firestore Security Rules for ShelfLife Sales App
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user profiles and sales commitments, combined with public read access for product information. It leverages path-based authorization to ensure that users can only access their own data.
 * @dataStructure The database is structured with user profiles under `/users/{userId}`, product information under `/products/{productId}`, and sales commitments under `/users/{userId}/salesCommitments/{salesCommitmentId}`.
 * @keySecurityDecisions User data is strictly controlled by the user's ID in the path. Products are globally readable. Sales commitments are owned by the user to whom they belong, enforced through a nested path.
 * @denormalizationForAuthorization  No denormalization is needed because authorization decisions are based solely on the path.
 * @structuralSegregation Public product data is stored in a top-level collection, separate from private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get,update,delete) User with ID 'user123' can read, update, and delete their profile if authenticated as 'user123'.
     * @deny (create) User with ID 'user123' cannot create a profile for 'user456'.
     * @deny (get,update,delete) User with ID 'user123' cannot read, update or delete the profile of 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to product documents.
     * @path /products/{productId}
     * @allow (get, list) Any user, authenticated or not, can read product information.
     * @deny (create, update, delete) No one can create, update, or delete product information through the client.
     * @principle Provides public read access with restricted writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to sales commitment documents.
     * @path /users/{userId}/salesCommitments/{salesCommitmentId}
     * @allow (create) User with ID 'user123' can create a sales commitment under their profile if authenticated as 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their sales commitments if authenticated as 'user123'.
     * @deny (create) User with ID 'user123' cannot create a sales commitment under the profile of 'user456'.
     * @deny (get, update, delete) User with ID 'user123' cannot read, update, or delete sales commitments under the profile of 'user456'.
     * @principle Enforces path-based ownership.
     */
    match /users/{userId}/salesCommitments/{salesCommitmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}