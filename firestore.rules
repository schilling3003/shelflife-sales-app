/**
 * @fileoverview Firestore Security Rules for the ShelfLife Sales application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and sales commitments,
 * while allowing public read access to product information. Authorization is primarily
 * path-based, ensuring that users can only access their own data, and no external data needs to be consulted.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user themselves.
 * - /products/{productId}: Product information, publicly readable.
 * - /users/{userId}/salesCommitments/{salesCommitmentId}: Sales commitments made by a user,
 *   accessible only to that user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and sales commitments.
 * - Product data is publicly readable but not writable through the client.
 * - Listing of all users is disallowed.
 *
 * Denormalization for Authorization:
 *  - The data structure is designed to avoid the need for denormalization. The `salesCommitments`
 *  subcollection under the user document allows for easy path-based authorization without needing
 *  to duplicate user information into the `salesCommitments` documents.
 *
 * Structural Segregation:
 *  - Publicly readable data (products) and private user data (profiles, sales commitments) are
 *  stored in separate top-level collections to simplify access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @deny (create) User with ID 'user123' cannot create a profile with a different ID 'user456'.
     * @allow (get) User with ID 'user123' can read their profile.
     * @deny (get) User with ID 'user123' cannot read another user's profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @deny (update) User with ID 'user123' cannot update another user's profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (delete) User with ID 'user123' cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to product information.
     * @path /products/{productId}
     * @allow (get) Any user can read product data.
     * @allow (list) Any user can list product data.
     * @deny (create) No user can create a product document.
     * @deny (update) No user can update a product document.
     * @deny (delete) No user can delete a product document.
     * @principle Allows public read access but restricts write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to sales commitments for a specific user.
     * @path /users/{userId}/salesCommitments/{salesCommitmentId}
     * @allow (create) User with ID 'user123' can create a sales commitment under their profile.
     * @deny (create) User with ID 'user123' cannot create a sales commitment under another user's profile.
     * @allow (get) User with ID 'user123' can read their sales commitment.
     * @deny (get) User with ID 'user123' cannot read another user's sales commitment.
     * @allow (update) User with ID 'user123' can update their sales commitment.
     * @deny (update) User with ID 'user123' cannot update another user's sales commitment.
     * @allow (delete) User with ID 'user123' can delete their sales commitment.
     * @deny (delete) User with ID 'user123' cannot delete another user's sales commitment.
     * @principle Enforces path-based ownership for sales commitments.
     */
    match /users/{userId}/salesCommitments/{salesCommitmentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}