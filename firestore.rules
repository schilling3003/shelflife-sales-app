/**
 * @fileoverview Firestore Security Rules for ShelfLife Sales application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and sales commitments.
 * Product information is publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write their own profile.
 * - /products/{productId}: Stores product information. This collection is publicly readable.
 * - /users/{userId}/salesCommitments/{salesCommitmentId}: Stores sales commitments made by a specific user. Only the user can read/write their own commitments.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Product data is globally readable.
 * - Sales commitments are nested under /users/{userId} to enforce ownership.
 *
 * Denormalization for Authorization:
 * - Path-based ownership eliminates the need for `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, or delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to product information.
     * @path /products/{productId}
     * @allow (get, list) - Any user can read product information.
     * @deny (create, update, delete) - No user can create, update, or delete product information.
     * @principle Allows public read access for product data.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to sales commitments for a specific user.
     * @path /users/{userId}/salesCommitments/{salesCommitmentId}
     * @allow (create, get, update, delete) - User with UID 'user123' can manage their commitments under /users/user123/salesCommitments.
     * @deny (create, get, update, delete) - User with UID 'user456' cannot manage commitments under /users/user123/salesCommitments.
     * @principle Enforces path-based ownership for sales commitments.
     */
    match /users/{userId}/salesCommitments/{salesCommitmentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}