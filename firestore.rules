/**
 * @fileoverview Firestore Security Rules for the ShelfLife Sales application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and sales commitments,
 * while allowing public read access to product information. Authorization Independence is a
 * key design principle, avoiding the need for complex `get()` calls in security rules.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /products/{productId}: Product catalog (globally readable).
 * - /users/{userId}/salesCommitments/{salesCommitmentId}: Sales commitments made by a user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Product information is publicly readable.
 * - Users can only manage their own sales commitments.
 * - Listing of user documents is disallowed.
 *
 * Denormalization for Authorization:
 * - The `SalesCommitment` entity contains a `userId` field to explicitly link it to the owning user,
 *   enabling simple ownership checks without the need for additional reads.
 *
 * Structural Segregation:
 * - Public product information is stored in a separate top-level collection (`/products`)
 *   to avoid mixing public and private data within the user's data tree. This allows for
 *   efficient public listing of products without compromising user privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile if userId == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can access their profile with userId == 'user_abc'.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot access profile with userId == 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // isOwner helper function to check ownership
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      // isSignedIn helper function to check authentication
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access to product documents.
     * @path /products/{productId}
     * @allow (get, list) - Any user can read product information.
     * @deny (create, update, delete) - No user can create, update, or delete product information.
     * @principle Allows public read access with owner-only writes (not yet implemented due to missing ownership field).
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to sales commitment documents for a specific user.
     * @path /users/{userId}/salesCommitments/{salesCommitmentId}
     * @allow (create) - User with UID 'user_abc' can create a sales commitment under their profile (userId == 'user_abc').
     * @allow (get, update, delete) - User with UID 'user_abc' can access sales commitment under their profile (userId == 'user_abc').
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot access sales commitment under user 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/salesCommitments/{salesCommitmentId} {
      // isOwner helper function to check ownership
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      // isSignedIn helper function to check authentication
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}